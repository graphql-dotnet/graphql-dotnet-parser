namespace GraphQLParser.AST
{
    public abstract class ASTListNode<TNode> : GraphQLParser.AST.ASTNode, System.Collections.Generic.IEnumerable<TNode>, System.Collections.Generic.IReadOnlyCollection<TNode>, System.Collections.Generic.IReadOnlyList<TNode>, System.Collections.IEnumerable
    {
        protected ASTListNode(System.Collections.Generic.List<TNode> items) { }
        public int Count { get; }
        public TNode this[int index] { get; }
        public System.Collections.Generic.List<TNode> Items { get; set; }
        public System.Collections.Generic.IEnumerator<TNode> GetEnumerator() { }
    }
    public abstract class ASTNode
    {
        protected ASTNode() { }
        public abstract GraphQLParser.AST.ASTNodeKind Kind { get; }
        public virtual System.Collections.Generic.List<GraphQLParser.AST.GraphQLComment>? Comments { get; set; }
        public virtual GraphQLParser.AST.GraphQLLocation Location { get; set; }
    }
    public enum ASTNodeKind
    {
        Name = 0,
        Document = 1,
        OperationDefinition = 2,
        VariableDefinition = 3,
        Variable = 4,
        SelectionSet = 5,
        Field = 6,
        Argument = 7,
        FragmentSpread = 8,
        InlineFragment = 9,
        FragmentDefinition = 10,
        IntValue = 11,
        FloatValue = 12,
        StringValue = 13,
        BooleanValue = 14,
        EnumValue = 15,
        ListValue = 16,
        ObjectValue = 17,
        ObjectField = 18,
        Directive = 19,
        NamedType = 20,
        ListType = 21,
        NonNullType = 22,
        NullValue = 23,
        SchemaDefinition = 24,
        RootOperationTypeDefinition = 25,
        ScalarTypeDefinition = 26,
        ObjectTypeDefinition = 27,
        FieldDefinition = 28,
        InputValueDefinition = 29,
        InterfaceTypeDefinition = 30,
        UnionTypeDefinition = 31,
        EnumTypeDefinition = 32,
        EnumValueDefinition = 33,
        InputObjectTypeDefinition = 34,
        ObjectTypeExtension = 35,
        DirectiveDefinition = 36,
        Comment = 37,
        Description = 38,
        TypeCondition = 39,
        Alias = 40,
        ScalarTypeExtension = 41,
        InterfaceTypeExtension = 42,
        UnionTypeExtension = 43,
        EnumTypeExtension = 44,
        InputObjectTypeExtension = 45,
        SchemaExtension = 46,
        ArgumentsDefinition = 47,
        Arguments = 48,
        InputFieldsDefinition = 49,
        VariablesDefinition = 50,
        EnumValuesDefinition = 51,
        FieldsDefinition = 52,
        Directives = 53,
        ImplementsInterfaces = 54,
        DirectiveLocations = 55,
        UnionMemberTypes = 56,
        FragmentName = 57,
    }
    public enum DirectiveLocation
    {
        [System.ComponentModel.Description("Location adjacent to a query operation.")]
        Query = 0,
        [System.ComponentModel.Description("Location adjacent to a mutation operation.")]
        Mutation = 1,
        [System.ComponentModel.Description("Location adjacent to a subscription operation.")]
        Subscription = 2,
        [System.ComponentModel.Description("Location adjacent to a field.")]
        Field = 3,
        [System.ComponentModel.Description("Location adjacent to a fragment definition.")]
        FragmentDefinition = 4,
        [System.ComponentModel.Description("Location adjacent to a fragment spread.")]
        FragmentSpread = 5,
        [System.ComponentModel.Description("Location adjacent to an inline fragment.")]
        InlineFragment = 6,
        [System.ComponentModel.Description("Location adjacent to a variable definition.")]
        VariableDefinition = 7,
        [System.ComponentModel.Description("Location adjacent to a schema definition.")]
        Schema = 8,
        [System.ComponentModel.Description("Location adjacent to a scalar definition.")]
        Scalar = 9,
        [System.ComponentModel.Description("Location adjacent to an object type definition.")]
        Object = 10,
        [System.ComponentModel.Description("Location adjacent to a field definition.")]
        FieldDefinition = 11,
        [System.ComponentModel.Description("Location adjacent to an argument definition.")]
        ArgumentDefinition = 12,
        [System.ComponentModel.Description("Location adjacent to an interface definition.")]
        Interface = 13,
        [System.ComponentModel.Description("Location adjacent to a union definition.")]
        Union = 14,
        [System.ComponentModel.Description("Location adjacent to an enum definition")]
        Enum = 15,
        [System.ComponentModel.Description("Location adjacent to an enum value definition")]
        EnumValue = 16,
        [System.ComponentModel.Description("Location adjacent to an input object type definition.")]
        InputObject = 17,
        [System.ComponentModel.Description("Location adjacent to an input object field definition.")]
        InputFieldDefinition = 18,
    }
    public class GraphQLAlias : GraphQLParser.AST.ASTNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLAlias(GraphQLParser.AST.GraphQLName name) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
    }
    public class GraphQLArgument : GraphQLParser.AST.ASTNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLArgument(GraphQLParser.AST.GraphQLName name, GraphQLParser.AST.GraphQLValue value) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
        public GraphQLParser.AST.GraphQLValue Value { get; set; }
    }
    public class GraphQLArguments : GraphQLParser.AST.ASTListNode<GraphQLParser.AST.GraphQLArgument>
    {
        public GraphQLArguments(System.Collections.Generic.List<GraphQLParser.AST.GraphQLArgument> items) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLValue? ValueFor(GraphQLParser.ROM name) { }
    }
    public class GraphQLArgumentsDefinition : GraphQLParser.AST.ASTListNode<GraphQLParser.AST.GraphQLInputValueDefinition>
    {
        public GraphQLArgumentsDefinition(System.Collections.Generic.List<GraphQLParser.AST.GraphQLInputValueDefinition> items) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public abstract class GraphQLBooleanValue : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.IHasValueNode
    {
        protected GraphQLBooleanValue() { }
        public abstract bool BoolValue { get; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; }
    }
    public class GraphQLComment : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasValueNode
    {
        public GraphQLComment(GraphQLParser.ROM value) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; }
    }
    public class GraphQLDescription : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasValueNode
    {
        public GraphQLDescription(GraphQLParser.ROM value) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; }
    }
    public class GraphQLDirective : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasArgumentsNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLDirective(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLArguments? Arguments { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
    }
    public class GraphQLDirectiveDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasArgumentsDefinitionNode
    {
        public GraphQLDirectiveDefinition(GraphQLParser.AST.GraphQLName name, GraphQLParser.AST.GraphQLDirectiveLocations locations) { }
        public GraphQLParser.AST.GraphQLArgumentsDefinition? Arguments { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLDirectiveLocations Locations { get; set; }
        public bool Repeatable { get; set; }
    }
    public class GraphQLDirectiveLocations : GraphQLParser.AST.ASTNode
    {
        public GraphQLDirectiveLocations(System.Collections.Generic.List<GraphQLParser.AST.DirectiveLocation> items) { }
        public System.Collections.Generic.List<GraphQLParser.AST.DirectiveLocation> Items { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLDirectives : GraphQLParser.AST.ASTListNode<GraphQLParser.AST.GraphQLDirective>
    {
        public GraphQLDirectives(System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective> items) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLDocument : GraphQLParser.AST.ASTNode
    {
        public GraphQLDocument(System.Collections.Generic.List<GraphQLParser.AST.ASTNode> definitions) { }
        public System.Collections.Generic.List<GraphQLParser.AST.ASTNode> Definitions { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Source { get; set; }
        public System.Collections.Generic.List<System.Collections.Generic.List<GraphQLParser.AST.GraphQLComment>>? UnattachedComments { get; set; }
    }
    public class GraphQLEnumTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLEnumTypeDefinition(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLEnumValuesDefinition? Values { get; set; }
    }
    public class GraphQLEnumTypeExtension : GraphQLParser.AST.GraphQLTypeExtension, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLEnumTypeExtension(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLEnumValuesDefinition? Values { get; set; }
    }
    public class GraphQLEnumValue : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.INamedNode
    {
        public GraphQLEnumValue(GraphQLParser.AST.GraphQLName name) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
    }
    public class GraphQLEnumValueDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLEnumValueDefinition(GraphQLParser.AST.GraphQLName name, GraphQLParser.AST.GraphQLEnumValue enumValue) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public GraphQLParser.AST.GraphQLEnumValue EnumValue { get; set; }
        public override bool IsChildDefinition { get; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLEnumValuesDefinition : GraphQLParser.AST.ASTListNode<GraphQLParser.AST.GraphQLEnumValueDefinition>
    {
        public GraphQLEnumValuesDefinition(System.Collections.Generic.List<GraphQLParser.AST.GraphQLEnumValueDefinition> items) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public abstract class GraphQLExecutableDefinition : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.IHasSelectionSetNode
    {
        protected GraphQLExecutableDefinition(GraphQLParser.AST.GraphQLSelectionSet selectionSet) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public GraphQLParser.AST.GraphQLSelectionSet SelectionSet { get; set; }
    }
    public class GraphQLFalseBooleanValue : GraphQLParser.AST.GraphQLBooleanValue
    {
        public GraphQLFalseBooleanValue() { }
        public override bool BoolValue { get; }
    }
    public class GraphQLField : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasArgumentsNode, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.IHasSelectionSetNode, GraphQLParser.AST.INamedNode, GraphQLParser.AST.ISelectionNode
    {
        public GraphQLField(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLAlias? Alias { get; set; }
        public GraphQLParser.AST.GraphQLArguments? Arguments { get; set; }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
        public GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; set; }
    }
    public class GraphQLFieldDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasArgumentsDefinitionNode, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLFieldDefinition(GraphQLParser.AST.GraphQLName name, GraphQLParser.AST.GraphQLType type) { }
        public GraphQLParser.AST.GraphQLArgumentsDefinition? Arguments { get; set; }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override bool IsChildDefinition { get; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType Type { get; set; }
    }
    public class GraphQLFieldsDefinition : GraphQLParser.AST.ASTListNode<GraphQLParser.AST.GraphQLFieldDefinition>
    {
        public GraphQLFieldsDefinition(System.Collections.Generic.List<GraphQLParser.AST.GraphQLFieldDefinition> items) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLFloatValue : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.IHasValueNode
    {
        public GraphQLFloatValue(GraphQLParser.ROM value) { }
        public GraphQLFloatValue(decimal value) { }
        public GraphQLFloatValue(double value) { }
        public GraphQLFloatValue(float value) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; }
    }
    public class GraphQLFragmentDefinition : GraphQLParser.AST.GraphQLExecutableDefinition
    {
        public GraphQLFragmentDefinition(GraphQLParser.AST.GraphQLFragmentName name, GraphQLParser.AST.GraphQLTypeCondition typeCondition, GraphQLParser.AST.GraphQLSelectionSet selectionSet) { }
        public GraphQLParser.AST.GraphQLFragmentName FragmentName { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLTypeCondition TypeCondition { get; set; }
    }
    public class GraphQLFragmentName : GraphQLParser.AST.ASTNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLFragmentName(GraphQLParser.AST.GraphQLName name) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
    }
    public class GraphQLFragmentSpread : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.ISelectionNode
    {
        public GraphQLFragmentSpread(GraphQLParser.AST.GraphQLFragmentName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public GraphQLParser.AST.GraphQLFragmentName FragmentName { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLImplementsInterfaces : GraphQLParser.AST.ASTListNode<GraphQLParser.AST.GraphQLNamedType>
    {
        public GraphQLImplementsInterfaces(System.Collections.Generic.List<GraphQLParser.AST.GraphQLNamedType> items) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLInlineFragment : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.IHasSelectionSetNode, GraphQLParser.AST.ISelectionNode
    {
        public GraphQLInlineFragment(GraphQLParser.AST.GraphQLSelectionSet selectionSet) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLSelectionSet SelectionSet { get; set; }
        public GraphQLParser.AST.GraphQLTypeCondition? TypeCondition { get; set; }
    }
    public class GraphQLInputFieldsDefinition : GraphQLParser.AST.ASTListNode<GraphQLParser.AST.GraphQLInputValueDefinition>
    {
        public GraphQLInputFieldsDefinition(System.Collections.Generic.List<GraphQLParser.AST.GraphQLInputValueDefinition> items) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLInputObjectTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLInputObjectTypeDefinition(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public GraphQLParser.AST.GraphQLInputFieldsDefinition? Fields { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLInputObjectTypeExtension : GraphQLParser.AST.GraphQLTypeExtension, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLInputObjectTypeExtension(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public GraphQLParser.AST.GraphQLInputFieldsDefinition? Fields { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLInputValueDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDefaultValueNode, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLInputValueDefinition(GraphQLParser.AST.GraphQLName name, GraphQLParser.AST.GraphQLType type) { }
        public GraphQLParser.AST.GraphQLValue? DefaultValue { get; set; }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override bool IsChildDefinition { get; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType Type { get; set; }
    }
    public class GraphQLIntValue : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.IHasValueNode
    {
        public GraphQLIntValue(GraphQLParser.ROM value) { }
        public GraphQLIntValue(int value) { }
        public GraphQLIntValue(long value) { }
        public GraphQLIntValue(System.Numerics.BigInteger value) { }
        public GraphQLIntValue(ulong value) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; }
    }
    public class GraphQLInterfaceTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.IHasFieldsDefinitionNode, GraphQLParser.AST.IHasInterfacesNode
    {
        public GraphQLInterfaceTypeDefinition(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public GraphQLParser.AST.GraphQLFieldsDefinition? Fields { get; set; }
        public GraphQLParser.AST.GraphQLImplementsInterfaces? Interfaces { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLInterfaceTypeExtension : GraphQLParser.AST.GraphQLTypeExtension, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.IHasFieldsDefinitionNode, GraphQLParser.AST.IHasInterfacesNode
    {
        public GraphQLInterfaceTypeExtension(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public GraphQLParser.AST.GraphQLFieldsDefinition? Fields { get; set; }
        public GraphQLParser.AST.GraphQLImplementsInterfaces? Interfaces { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLListType : GraphQLParser.AST.GraphQLType
    {
        public GraphQLListType(GraphQLParser.AST.GraphQLType type) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType Type { get; set; }
    }
    public class GraphQLListValue : GraphQLParser.AST.GraphQLValue
    {
        public GraphQLListValue() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLValue>? Values { get; set; }
    }
    public readonly struct GraphQLLocation : System.IEquatable<GraphQLParser.AST.GraphQLLocation>
    {
        public GraphQLLocation(int start, int end) { }
        public int End { get; }
        public int Start { get; }
        public void Deconstruct(out int start, out int end) { }
        public bool Equals(GraphQLParser.AST.GraphQLLocation other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(GraphQLParser.AST.GraphQLLocation left, GraphQLParser.AST.GraphQLLocation right) { }
        public static bool operator ==(GraphQLParser.AST.GraphQLLocation left, GraphQLParser.AST.GraphQLLocation right) { }
    }
    public class GraphQLName : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasValueNode, System.IEquatable<GraphQLParser.AST.GraphQLName>
    {
        public GraphQLName(GraphQLParser.ROM value) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public string StringValue { get; }
        public GraphQLParser.ROM Value { get; }
        public bool Equals(GraphQLParser.AST.GraphQLName? other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static string op_Explicit(GraphQLParser.AST.GraphQLName? node) { }
        public static GraphQLParser.ROM op_Implicit(GraphQLParser.AST.GraphQLName? node) { }
        public static bool operator !=(GraphQLParser.AST.GraphQLName? name1, GraphQLParser.AST.GraphQLName? name2) { }
        public static bool operator !=(GraphQLParser.AST.GraphQLName? name1, string? name2) { }
        public static bool operator !=(string? name1, GraphQLParser.AST.GraphQLName? name2) { }
        public static bool operator ==(GraphQLParser.AST.GraphQLName? name1, GraphQLParser.AST.GraphQLName? name2) { }
        public static bool operator ==(GraphQLParser.AST.GraphQLName? name1, string? name2) { }
        public static bool operator ==(string? name1, GraphQLParser.AST.GraphQLName? name2) { }
    }
    public class GraphQLNamedType : GraphQLParser.AST.GraphQLType, GraphQLParser.AST.INamedNode
    {
        public GraphQLNamedType(GraphQLParser.AST.GraphQLName name) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
    }
    public class GraphQLNonNullType : GraphQLParser.AST.GraphQLType
    {
        public GraphQLNonNullType(GraphQLParser.AST.GraphQLType type) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType Type { get; set; }
    }
    public class GraphQLNullValue : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.IHasValueNode
    {
        public GraphQLNullValue() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; }
    }
    public class GraphQLObjectField : GraphQLParser.AST.ASTNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLObjectField(GraphQLParser.AST.GraphQLName name, GraphQLParser.AST.GraphQLValue value) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
        public GraphQLParser.AST.GraphQLValue Value { get; set; }
    }
    public class GraphQLObjectTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.IHasFieldsDefinitionNode, GraphQLParser.AST.IHasInterfacesNode
    {
        public GraphQLObjectTypeDefinition(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public GraphQLParser.AST.GraphQLFieldsDefinition? Fields { get; set; }
        public GraphQLParser.AST.GraphQLImplementsInterfaces? Interfaces { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLObjectTypeExtension : GraphQLParser.AST.GraphQLTypeExtension, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.IHasFieldsDefinitionNode, GraphQLParser.AST.IHasInterfacesNode
    {
        public GraphQLObjectTypeExtension(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public GraphQLParser.AST.GraphQLFieldsDefinition? Fields { get; set; }
        public GraphQLParser.AST.GraphQLImplementsInterfaces? Interfaces { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLObjectValue : GraphQLParser.AST.GraphQLValue
    {
        public GraphQLObjectValue() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLObjectField>? Fields { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLObjectField? Field(GraphQLParser.ROM name) { }
    }
    public class GraphQLOperationDefinition : GraphQLParser.AST.GraphQLExecutableDefinition, GraphQLParser.AST.INamedNode
    {
        public GraphQLOperationDefinition(GraphQLParser.AST.GraphQLSelectionSet selectionSet) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
        public GraphQLParser.AST.OperationType Operation { get; set; }
        public GraphQLParser.AST.GraphQLVariablesDefinition? Variables { get; set; }
    }
    public class GraphQLRootOperationTypeDefinition : GraphQLParser.AST.ASTNode
    {
        public GraphQLRootOperationTypeDefinition() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.OperationType Operation { get; set; }
        public GraphQLParser.AST.GraphQLNamedType? Type { get; set; }
    }
    public class GraphQLScalarTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLScalarTypeDefinition(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLScalarTypeExtension : GraphQLParser.AST.GraphQLTypeExtension, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLScalarTypeExtension(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLSchemaDefinition : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDescriptionNode, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLSchemaDefinition(System.Collections.Generic.List<GraphQLParser.AST.GraphQLRootOperationTypeDefinition> operationTypes) { }
        public GraphQLParser.AST.GraphQLDescription? Description { get; set; }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLRootOperationTypeDefinition> OperationTypes { get; set; }
    }
    public class GraphQLSchemaExtension : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLSchemaExtension() { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLRootOperationTypeDefinition>? OperationTypes { get; set; }
    }
    public class GraphQLSelectionSet : GraphQLParser.AST.ASTNode
    {
        public GraphQLSelectionSet(System.Collections.Generic.List<GraphQLParser.AST.ASTNode> selections) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.ASTNode> Selections { get; set; }
    }
    public class GraphQLStringValue : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.IHasValueNode
    {
        public GraphQLStringValue(GraphQLParser.ROM value) { }
        public GraphQLStringValue(string value) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; }
    }
    public class GraphQLTrueBooleanValue : GraphQLParser.AST.GraphQLBooleanValue
    {
        public GraphQLTrueBooleanValue() { }
        public override bool BoolValue { get; }
    }
    public abstract class GraphQLType : GraphQLParser.AST.ASTNode
    {
        protected GraphQLType() { }
    }
    public class GraphQLTypeCondition : GraphQLParser.AST.ASTNode
    {
        public GraphQLTypeCondition(GraphQLParser.AST.GraphQLNamedType type) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLNamedType Type { get; set; }
    }
    public abstract class GraphQLTypeDefinition : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDescriptionNode, GraphQLParser.AST.INamedNode
    {
        protected GraphQLTypeDefinition() { }
        protected GraphQLTypeDefinition(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDescription? Description { get; set; }
        public virtual bool IsChildDefinition { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
    }
    public abstract class GraphQLTypeExtension : GraphQLParser.AST.ASTNode, GraphQLParser.AST.INamedNode
    {
        protected GraphQLTypeExtension(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
    }
    public class GraphQLUnionMemberTypes : GraphQLParser.AST.ASTListNode<GraphQLParser.AST.GraphQLNamedType>
    {
        public GraphQLUnionMemberTypes(System.Collections.Generic.List<GraphQLParser.AST.GraphQLNamedType> items) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLUnionTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLUnionTypeDefinition(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLUnionMemberTypes? Types { get; set; }
    }
    public class GraphQLUnionTypeExtension : GraphQLParser.AST.GraphQLTypeExtension, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLUnionTypeExtension(GraphQLParser.AST.GraphQLName name) { }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLUnionMemberTypes? Types { get; set; }
    }
    public abstract class GraphQLValue : GraphQLParser.AST.ASTNode
    {
        protected GraphQLValue() { }
    }
    public class GraphQLVariable : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.INamedNode
    {
        public GraphQLVariable(GraphQLParser.AST.GraphQLName name) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName Name { get; set; }
    }
    public class GraphQLVariableDefinition : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDefaultValueNode, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLVariableDefinition(GraphQLParser.AST.GraphQLVariable variable, GraphQLParser.AST.GraphQLType type) { }
        public GraphQLParser.AST.GraphQLValue? DefaultValue { get; set; }
        public GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType Type { get; set; }
        public GraphQLParser.AST.GraphQLVariable Variable { get; set; }
    }
    public class GraphQLVariablesDefinition : GraphQLParser.AST.ASTListNode<GraphQLParser.AST.GraphQLVariableDefinition>
    {
        public GraphQLVariablesDefinition(System.Collections.Generic.List<GraphQLParser.AST.GraphQLVariableDefinition> items) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public interface IHasArgumentsDefinitionNode
    {
        GraphQLParser.AST.GraphQLArgumentsDefinition? Arguments { get; set; }
    }
    public interface IHasArgumentsNode
    {
        GraphQLParser.AST.GraphQLArguments? Arguments { get; set; }
    }
    public interface IHasDefaultValueNode
    {
        GraphQLParser.AST.GraphQLValue? DefaultValue { get; set; }
    }
    public interface IHasDescriptionNode
    {
        GraphQLParser.AST.GraphQLDescription? Description { get; set; }
    }
    public interface IHasDirectivesNode
    {
        GraphQLParser.AST.GraphQLDirectives? Directives { get; set; }
    }
    public interface IHasFieldsDefinitionNode
    {
        GraphQLParser.AST.GraphQLFieldsDefinition? Fields { get; set; }
    }
    public interface IHasInterfacesNode
    {
        GraphQLParser.AST.GraphQLImplementsInterfaces? Interfaces { get; set; }
    }
    public interface IHasSelectionSetNode
    {
        GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; set; }
    }
    public interface IHasValueNode
    {
        GraphQLParser.ROM Value { get; }
    }
    public interface INamedNode
    {
        GraphQLParser.AST.GraphQLName Name { get; set; }
    }
    public interface ISelectionNode { }
    public enum OperationType
    {
        Query = 0,
        Mutation = 1,
        Subscription = 2,
    }
}
namespace GraphQLParser
{
    public static class ASTNodeExtensions
    {
        public static int AllNestedCount(this GraphQLParser.AST.ASTNode node) { }
        public static TNode? Find<TNode>(this GraphQLParser.AST.ASTListNode<TNode> node, GraphQLParser.ROM name)
            where TNode :  class, GraphQLParser.AST.INamedNode { }
        public static GraphQLParser.AST.GraphQLFragmentDefinition? FindFragmentDefinition(this GraphQLParser.AST.GraphQLDocument document, GraphQLParser.ROM name) { }
        public static int FragmentsCount(this GraphQLParser.AST.GraphQLDocument document) { }
        public static int MaxNestedDepth(this GraphQLParser.AST.ASTNode node) { }
        public static GraphQLParser.AST.GraphQLOperationDefinition? OperationWithName(this GraphQLParser.AST.GraphQLDocument document, GraphQLParser.ROM operationName) { }
        public static int OperationsCount(this GraphQLParser.AST.GraphQLDocument document) { }
    }
    [System.Flags]
    public enum IgnoreOptions
    {
        None = 0,
        Comments = 1,
        Locations = 2,
        All = 3,
    }
    public static class Lexer
    {
        public static GraphQLParser.Token Lex(GraphQLParser.ROM source, int start = 0) { }
    }
    public readonly struct Location : System.IEquatable<GraphQLParser.Location>
    {
        public Location(int line, int column) { }
        public int Column { get; }
        public int Line { get; }
        public void Deconstruct(out int line, out int column) { }
        public bool Equals(GraphQLParser.Location other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static GraphQLParser.Location FromLinearPosition(GraphQLParser.ROM source, int position) { }
        public static bool operator !=(GraphQLParser.Location left, GraphQLParser.Location right) { }
        public static bool operator ==(GraphQLParser.Location left, GraphQLParser.Location right) { }
    }
    public static class Parser
    {
        public static GraphQLParser.AST.GraphQLDocument Parse(GraphQLParser.ROM source, GraphQLParser.ParserOptions options = default) { }
        public static T Parse<T>(GraphQLParser.ROM source, GraphQLParser.ParserOptions options = default)
            where T : GraphQLParser.AST.ASTNode { }
    }
    public struct ParserOptions
    {
        public GraphQLParser.IgnoreOptions Ignore { get; set; }
        public int? MaxDepth { get; set; }
    }
    public readonly struct ROM : System.IEquatable<GraphQLParser.ROM>
    {
        public static readonly GraphQLParser.ROM Empty;
        public ROM(System.ReadOnlyMemory<char> memory) { }
        public bool IsEmpty { get; }
        public int Length { get; }
        public System.ReadOnlySpan<char> Span { get; }
        public bool Equals(GraphQLParser.ROM other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public GraphQLParser.ROM Slice(int start) { }
        public GraphQLParser.ROM Slice(int start, int length) { }
        public override string ToString() { }
        public static bool IsEmptyOrWhiteSpace(GraphQLParser.ROM value) { }
        public static string op_Explicit(GraphQLParser.ROM rom) { }
        public static System.ReadOnlyMemory<char> op_Implicit(GraphQLParser.ROM rom) { }
        public static System.ReadOnlySpan<char> op_Implicit(GraphQLParser.ROM rom) { }
        public static GraphQLParser.ROM op_Implicit(char[] array) { }
        public static GraphQLParser.ROM op_Implicit(System.ReadOnlyMemory<char> memory) { }
        public static GraphQLParser.ROM op_Implicit(string? s) { }
        public static bool operator !=(GraphQLParser.ROM rom, string? s) { }
        public static bool operator !=(GraphQLParser.ROM rom1, GraphQLParser.ROM rom2) { }
        public static bool operator !=(string? s, GraphQLParser.ROM rom) { }
        public static bool operator ==(GraphQLParser.ROM rom, string? s) { }
        public static bool operator ==(GraphQLParser.ROM rom1, GraphQLParser.ROM rom2) { }
        public static bool operator ==(string? s, GraphQLParser.ROM rom) { }
    }
    public readonly struct Token
    {
        public Token(GraphQLParser.TokenKind kind, GraphQLParser.ROM value, int start, int end) { }
        public int End { get; }
        public GraphQLParser.TokenKind Kind { get; }
        public int Start { get; }
        public GraphQLParser.ROM Value { get; }
        public override string ToString() { }
    }
    public enum TokenKind
    {
        EOF = 1,
        BANG = 2,
        DOLLAR = 3,
        PAREN_L = 4,
        PAREN_R = 5,
        SPREAD = 6,
        COLON = 7,
        EQUALS = 8,
        AT = 9,
        BRACKET_L = 10,
        BRACKET_R = 11,
        BRACE_L = 12,
        PIPE = 13,
        BRACE_R = 14,
        NAME = 15,
        INT = 16,
        FLOAT = 17,
        STRING = 18,
        COMMENT = 19,
        UNKNOWN = 20,
        AMPERSAND = 21,
    }
}
namespace GraphQLParser.Exceptions
{
    public class GraphQLMaxDepthExceededException : GraphQLParser.Exceptions.GraphQLParserException
    {
        public GraphQLMaxDepthExceededException(GraphQLParser.ROM source, int location) { }
    }
    public class GraphQLParserException : System.Exception
    {
        public GraphQLParserException(string description, GraphQLParser.ROM source, int location) { }
        public string Description { get; }
        public GraphQLParser.Location Location { get; }
    }
    public class GraphQLSyntaxErrorException : GraphQLParser.Exceptions.GraphQLParserException
    {
        public GraphQLSyntaxErrorException(string description, GraphQLParser.ROM source, int location) { }
    }
}
namespace GraphQLParser.Visitors
{
    public class ASTVisitor<TContext>
        where TContext : GraphQLParser.Visitors.IASTVisitorContext
    {
        public ASTVisitor() { }
        protected virtual System.Threading.Tasks.ValueTask VisitAliasAsync(GraphQLParser.AST.GraphQLAlias alias, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitArgumentAsync(GraphQLParser.AST.GraphQLArgument argument, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitArgumentsAsync(GraphQLParser.AST.GraphQLArguments arguments, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitArgumentsDefinitionAsync(GraphQLParser.AST.GraphQLArgumentsDefinition argumentsDefinition, TContext context) { }
        public virtual System.Threading.Tasks.ValueTask VisitAsync(GraphQLParser.AST.ASTNode? node, TContext context) { }
        protected System.Threading.Tasks.ValueTask VisitAsync<T>(System.Collections.Generic.List<T>? nodes, TContext context)
            where T : GraphQLParser.AST.ASTNode { }
        protected virtual System.Threading.Tasks.ValueTask VisitBooleanValueAsync(GraphQLParser.AST.GraphQLBooleanValue booleanValue, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitCommentAsync(GraphQLParser.AST.GraphQLComment comment, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitDescriptionAsync(GraphQLParser.AST.GraphQLDescription description, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitDirectiveAsync(GraphQLParser.AST.GraphQLDirective directive, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitDirectiveDefinitionAsync(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitDirectiveLocationsAsync(GraphQLParser.AST.GraphQLDirectiveLocations directiveLocations, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitDirectivesAsync(GraphQLParser.AST.GraphQLDirectives directives, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitDocumentAsync(GraphQLParser.AST.GraphQLDocument document, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitEnumTypeDefinitionAsync(GraphQLParser.AST.GraphQLEnumTypeDefinition enumTypeDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitEnumTypeExtensionAsync(GraphQLParser.AST.GraphQLEnumTypeExtension enumTypeExtension, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitEnumValueAsync(GraphQLParser.AST.GraphQLEnumValue enumValue, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitEnumValueDefinitionAsync(GraphQLParser.AST.GraphQLEnumValueDefinition enumValueDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitEnumValuesDefinitionAsync(GraphQLParser.AST.GraphQLEnumValuesDefinition enumValuesDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitFieldAsync(GraphQLParser.AST.GraphQLField field, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitFieldDefinitionAsync(GraphQLParser.AST.GraphQLFieldDefinition fieldDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitFieldsDefinitionAsync(GraphQLParser.AST.GraphQLFieldsDefinition fieldsDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitFloatValueAsync(GraphQLParser.AST.GraphQLFloatValue floatValue, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitFragmentDefinitionAsync(GraphQLParser.AST.GraphQLFragmentDefinition fragmentDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitFragmentNameAsync(GraphQLParser.AST.GraphQLFragmentName fragmentName, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitFragmentSpreadAsync(GraphQLParser.AST.GraphQLFragmentSpread fragmentSpread, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitImplementsInterfacesAsync(GraphQLParser.AST.GraphQLImplementsInterfaces implementsInterfaces, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitInlineFragmentAsync(GraphQLParser.AST.GraphQLInlineFragment inlineFragment, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitInputFieldsDefinitionAsync(GraphQLParser.AST.GraphQLInputFieldsDefinition inputFieldsDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitInputObjectTypeDefinitionAsync(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputObjectTypeDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitInputObjectTypeExtensionAsync(GraphQLParser.AST.GraphQLInputObjectTypeExtension inputObjectTypeExtension, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitInputValueDefinitionAsync(GraphQLParser.AST.GraphQLInputValueDefinition inputValueDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitIntValueAsync(GraphQLParser.AST.GraphQLIntValue intValue, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitInterfaceTypeDefinitionAsync(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceTypeDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitInterfaceTypeExtensionAsync(GraphQLParser.AST.GraphQLInterfaceTypeExtension interfaceTypeExtension, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitListTypeAsync(GraphQLParser.AST.GraphQLListType listType, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitListValueAsync(GraphQLParser.AST.GraphQLListValue listValue, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitNameAsync(GraphQLParser.AST.GraphQLName name, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitNamedTypeAsync(GraphQLParser.AST.GraphQLNamedType namedType, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitNonNullTypeAsync(GraphQLParser.AST.GraphQLNonNullType nonNullType, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitNullValueAsync(GraphQLParser.AST.GraphQLNullValue nullValue, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitObjectFieldAsync(GraphQLParser.AST.GraphQLObjectField objectField, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitObjectTypeDefinitionAsync(GraphQLParser.AST.GraphQLObjectTypeDefinition objectTypeDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitObjectTypeExtensionAsync(GraphQLParser.AST.GraphQLObjectTypeExtension objectTypeExtension, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitObjectValueAsync(GraphQLParser.AST.GraphQLObjectValue objectValue, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitOperationDefinitionAsync(GraphQLParser.AST.GraphQLOperationDefinition operationDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitRootOperationTypeDefinitionAsync(GraphQLParser.AST.GraphQLRootOperationTypeDefinition rootOperationTypeDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitScalarTypeDefinitionAsync(GraphQLParser.AST.GraphQLScalarTypeDefinition scalarTypeDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitScalarTypeExtensionAsync(GraphQLParser.AST.GraphQLScalarTypeExtension scalarTypeExtension, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitSchemaDefinitionAsync(GraphQLParser.AST.GraphQLSchemaDefinition schemaDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitSchemaExtensionAsync(GraphQLParser.AST.GraphQLSchemaExtension schemaExtension, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitSelectionSetAsync(GraphQLParser.AST.GraphQLSelectionSet selectionSet, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitStringValueAsync(GraphQLParser.AST.GraphQLStringValue stringValue, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitTypeConditionAsync(GraphQLParser.AST.GraphQLTypeCondition typeCondition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitUnionMemberTypesAsync(GraphQLParser.AST.GraphQLUnionMemberTypes unionMemberTypes, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitUnionTypeDefinitionAsync(GraphQLParser.AST.GraphQLUnionTypeDefinition unionTypeDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitUnionTypeExtensionAsync(GraphQLParser.AST.GraphQLUnionTypeExtension unionTypeExtension, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitVariableAsync(GraphQLParser.AST.GraphQLVariable variable, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitVariableDefinitionAsync(GraphQLParser.AST.GraphQLVariableDefinition variableDefinition, TContext context) { }
        protected virtual System.Threading.Tasks.ValueTask VisitVariablesDefinitionAsync(GraphQLParser.AST.GraphQLVariablesDefinition variablesDefinition, TContext context) { }
    }
    public class CountVisitor<TContext> : GraphQLParser.Visitors.ASTVisitor<TContext>
        where TContext : GraphQLParser.Visitors.ICountContext
    {
        public CountVisitor() { }
        public override System.Threading.Tasks.ValueTask VisitAsync(GraphQLParser.AST.ASTNode? node, TContext context) { }
    }
    public class DefaultCountContext : GraphQLParser.Visitors.IASTVisitorContext, GraphQLParser.Visitors.ICountContext
    {
        public DefaultCountContext(System.Func<GraphQLParser.AST.ASTNode, bool> shouldInclude) { }
        public int Count { get; set; }
        public System.Func<GraphQLParser.AST.ASTNode, bool> ShouldInclude { get; }
        public System.Threading.CancellationToken CancellationToken { get; init; }
    }
    public class DefaultMaxDepthContext : GraphQLParser.Visitors.IASTVisitorContext, GraphQLParser.Visitors.IMaxDepthContext
    {
        public DefaultMaxDepthContext() { }
        public int MaxDepth { get; set; }
        public System.Threading.CancellationToken CancellationToken { get; init; }
        public System.Collections.Generic.Stack<GraphQLParser.AST.ASTNode> Parents { get; init; }
    }
    public interface IASTVisitorContext
    {
        System.Threading.CancellationToken CancellationToken { get; }
    }
    public interface ICountContext : GraphQLParser.Visitors.IASTVisitorContext
    {
        int Count { get; set; }
        System.Func<GraphQLParser.AST.ASTNode, bool> ShouldInclude { get; }
    }
    public interface IMaxDepthContext : GraphQLParser.Visitors.IASTVisitorContext
    {
        int MaxDepth { get; set; }
        System.Collections.Generic.Stack<GraphQLParser.AST.ASTNode> Parents { get; }
    }
    public interface IPrintContext : GraphQLParser.Visitors.IASTVisitorContext
    {
        int IndentLevel { get; set; }
        bool IndentPrinted { get; set; }
        [System.Obsolete("Use LastVisitedNode instead")]
        bool LastDefinitionPrinted { get; set; }
        GraphQLParser.AST.ASTNode? LastVisitedNode { get; set; }
        bool NewLinePrinted { get; set; }
        System.Collections.Generic.Stack<GraphQLParser.AST.ASTNode> Parents { get; }
        System.IO.TextWriter Writer { get; }
    }
    public class MaxDepthVisitor<TContext> : GraphQLParser.Visitors.ASTVisitor<TContext>
        where TContext : GraphQLParser.Visitors.IMaxDepthContext
    {
        public MaxDepthVisitor() { }
        public override System.Threading.Tasks.ValueTask VisitAsync(GraphQLParser.AST.ASTNode? node, TContext context) { }
    }
    public static class PrintContextExtensions
    {
        public static System.Threading.Tasks.ValueTask WriteAsync<TContext>(this TContext context, GraphQLParser.ROM value)
            where TContext : GraphQLParser.Visitors.IPrintContext { }
        public static System.Threading.Tasks.ValueTask WriteDoubleLineAsync<TContext>(this TContext context)
            where TContext : GraphQLParser.Visitors.IPrintContext { }
        public static System.Threading.Tasks.ValueTask WriteLineAsync<TContext>(this TContext context)
            where TContext : GraphQLParser.Visitors.IPrintContext { }
    }
    public class SDLPrinter : GraphQLParser.Visitors.SDLPrinter<GraphQLParser.Visitors.SDLPrinter.DefaultPrintContext>
    {
        public SDLPrinter() { }
        public SDLPrinter(GraphQLParser.Visitors.SDLPrinterOptions options) { }
        public virtual System.Threading.Tasks.ValueTask PrintAsync(GraphQLParser.AST.ASTNode node, System.IO.TextWriter writer, System.Threading.CancellationToken cancellationToken = default) { }
        public class DefaultPrintContext : GraphQLParser.Visitors.IASTVisitorContext, GraphQLParser.Visitors.IPrintContext
        {
            public DefaultPrintContext(System.IO.TextWriter writer) { }
            public int IndentLevel { get; set; }
            public bool IndentPrinted { get; set; }
            [System.Obsolete("Use LastVisitedNode instead")]
            public bool LastDefinitionPrinted { get; set; }
            public GraphQLParser.AST.ASTNode? LastVisitedNode { get; set; }
            public bool NewLinePrinted { get; set; }
            public System.IO.TextWriter Writer { get; }
            public System.Threading.CancellationToken CancellationToken { get; init; }
            public System.Collections.Generic.Stack<GraphQLParser.AST.ASTNode> Parents { get; init; }
        }
    }
    public static class SDLPrinterExtensions
    {
        public static string Print(this GraphQLParser.Visitors.SDLPrinter printer, GraphQLParser.AST.ASTNode node) { }
        public static void Print(this GraphQLParser.Visitors.SDLPrinter printer, GraphQLParser.AST.ASTNode node, System.Text.StringBuilder stringBuilder) { }
        public static void Print(this GraphQLParser.Visitors.SDLPrinter printer, GraphQLParser.AST.ASTNode node, System.IO.MemoryStream memoryStream, System.Text.Encoding? encoding = null) { }
    }
    public class SDLPrinterOptions
    {
        public SDLPrinterOptions() { }
        public int IndentSize { get; set; }
        public bool PrintDescriptions { get; set; }
        public bool EachDirectiveLocationOnNewLine { get; init; }
        public bool EachUnionMemberOnNewLine { get; init; }
        public bool PrintComments { get; init; }
    }
    public class SDLPrinter<TContext> : GraphQLParser.Visitors.ASTVisitor<TContext>
        where TContext : GraphQLParser.Visitors.IPrintContext
    {
        public SDLPrinter() { }
        public SDLPrinter(GraphQLParser.Visitors.SDLPrinterOptions options) { }
        public GraphQLParser.Visitors.SDLPrinterOptions Options { get; }
        protected virtual System.Threading.Tasks.ValueTask MakeVerticalIndentationBetweenTopLevelDefinitions(GraphQLParser.AST.ASTNode node, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitAliasAsync(GraphQLParser.AST.GraphQLAlias alias, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitArgumentAsync(GraphQLParser.AST.GraphQLArgument argument, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitArgumentsAsync(GraphQLParser.AST.GraphQLArguments arguments, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitArgumentsDefinitionAsync(GraphQLParser.AST.GraphQLArgumentsDefinition argumentsDefinition, TContext context) { }
        public override System.Threading.Tasks.ValueTask VisitAsync(GraphQLParser.AST.ASTNode? node, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitBooleanValueAsync(GraphQLParser.AST.GraphQLBooleanValue booleanValue, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitCommentAsync(GraphQLParser.AST.GraphQLComment comment, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitDescriptionAsync(GraphQLParser.AST.GraphQLDescription description, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitDirectiveAsync(GraphQLParser.AST.GraphQLDirective directive, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitDirectiveDefinitionAsync(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitDirectiveLocationsAsync(GraphQLParser.AST.GraphQLDirectiveLocations directiveLocations, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitDirectivesAsync(GraphQLParser.AST.GraphQLDirectives directives, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitDocumentAsync(GraphQLParser.AST.GraphQLDocument document, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitEnumTypeDefinitionAsync(GraphQLParser.AST.GraphQLEnumTypeDefinition enumTypeDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitEnumTypeExtensionAsync(GraphQLParser.AST.GraphQLEnumTypeExtension enumTypeExtension, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitEnumValueAsync(GraphQLParser.AST.GraphQLEnumValue enumValue, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitEnumValueDefinitionAsync(GraphQLParser.AST.GraphQLEnumValueDefinition enumValueDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitEnumValuesDefinitionAsync(GraphQLParser.AST.GraphQLEnumValuesDefinition enumValuesDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitFieldAsync(GraphQLParser.AST.GraphQLField field, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitFieldDefinitionAsync(GraphQLParser.AST.GraphQLFieldDefinition fieldDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitFieldsDefinitionAsync(GraphQLParser.AST.GraphQLFieldsDefinition fieldsDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitFloatValueAsync(GraphQLParser.AST.GraphQLFloatValue floatValue, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitFragmentDefinitionAsync(GraphQLParser.AST.GraphQLFragmentDefinition fragmentDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitFragmentNameAsync(GraphQLParser.AST.GraphQLFragmentName fragmentName, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitFragmentSpreadAsync(GraphQLParser.AST.GraphQLFragmentSpread fragmentSpread, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitImplementsInterfacesAsync(GraphQLParser.AST.GraphQLImplementsInterfaces implementsInterfaces, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitInlineFragmentAsync(GraphQLParser.AST.GraphQLInlineFragment inlineFragment, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitInputFieldsDefinitionAsync(GraphQLParser.AST.GraphQLInputFieldsDefinition inputFieldsDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitInputObjectTypeDefinitionAsync(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputObjectTypeDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitInputObjectTypeExtensionAsync(GraphQLParser.AST.GraphQLInputObjectTypeExtension inputObjectTypeExtension, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitInputValueDefinitionAsync(GraphQLParser.AST.GraphQLInputValueDefinition inputValueDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitIntValueAsync(GraphQLParser.AST.GraphQLIntValue intValue, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitInterfaceTypeDefinitionAsync(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceTypeDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitInterfaceTypeExtensionAsync(GraphQLParser.AST.GraphQLInterfaceTypeExtension interfaceTypeExtension, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitListTypeAsync(GraphQLParser.AST.GraphQLListType listType, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitListValueAsync(GraphQLParser.AST.GraphQLListValue listValue, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitNameAsync(GraphQLParser.AST.GraphQLName name, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitNamedTypeAsync(GraphQLParser.AST.GraphQLNamedType namedType, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitNonNullTypeAsync(GraphQLParser.AST.GraphQLNonNullType nonNullType, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitNullValueAsync(GraphQLParser.AST.GraphQLNullValue nullValue, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitObjectFieldAsync(GraphQLParser.AST.GraphQLObjectField objectField, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitObjectTypeDefinitionAsync(GraphQLParser.AST.GraphQLObjectTypeDefinition objectTypeDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitObjectTypeExtensionAsync(GraphQLParser.AST.GraphQLObjectTypeExtension objectTypeExtension, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitObjectValueAsync(GraphQLParser.AST.GraphQLObjectValue objectValue, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitOperationDefinitionAsync(GraphQLParser.AST.GraphQLOperationDefinition operationDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitRootOperationTypeDefinitionAsync(GraphQLParser.AST.GraphQLRootOperationTypeDefinition rootOperationTypeDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitScalarTypeDefinitionAsync(GraphQLParser.AST.GraphQLScalarTypeDefinition scalarTypeDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitScalarTypeExtensionAsync(GraphQLParser.AST.GraphQLScalarTypeExtension scalarTypeExtension, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitSchemaDefinitionAsync(GraphQLParser.AST.GraphQLSchemaDefinition schemaDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitSchemaExtensionAsync(GraphQLParser.AST.GraphQLSchemaExtension schemaExtension, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitSelectionSetAsync(GraphQLParser.AST.GraphQLSelectionSet selectionSet, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitStringValueAsync(GraphQLParser.AST.GraphQLStringValue stringValue, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitTypeConditionAsync(GraphQLParser.AST.GraphQLTypeCondition typeCondition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitUnionMemberTypesAsync(GraphQLParser.AST.GraphQLUnionMemberTypes unionMemberTypes, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitUnionTypeDefinitionAsync(GraphQLParser.AST.GraphQLUnionTypeDefinition unionTypeDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitUnionTypeExtensionAsync(GraphQLParser.AST.GraphQLUnionTypeExtension unionTypeExtension, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitVariableAsync(GraphQLParser.AST.GraphQLVariable variable, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitVariableDefinitionAsync(GraphQLParser.AST.GraphQLVariableDefinition variableDefinition, TContext context) { }
        protected override System.Threading.Tasks.ValueTask VisitVariablesDefinitionAsync(GraphQLParser.AST.GraphQLVariablesDefinition variablesDefinition, TContext context) { }
    }
    public class StructurePrinter : GraphQLParser.Visitors.StructurePrinter<GraphQLParser.Visitors.SDLPrinter.DefaultPrintContext>
    {
        public StructurePrinter() { }
        public StructurePrinter(GraphQLParser.Visitors.StructurePrinterOptions options) { }
        public virtual System.Threading.Tasks.ValueTask PrintAsync(GraphQLParser.AST.ASTNode node, System.IO.TextWriter writer, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class StructurePrinterOptions
    {
        public StructurePrinterOptions() { }
        public int IndentSize { get; set; }
        public bool PrintLocations { get; init; }
        public bool PrintNames { get; init; }
    }
    public class StructurePrinter<TContext> : GraphQLParser.Visitors.ASTVisitor<TContext>
        where TContext : GraphQLParser.Visitors.IPrintContext
    {
        public StructurePrinter() { }
        public StructurePrinter(GraphQLParser.Visitors.StructurePrinterOptions options) { }
        public GraphQLParser.Visitors.StructurePrinterOptions Options { get; }
        public override System.Threading.Tasks.ValueTask VisitAsync(GraphQLParser.AST.ASTNode? node, TContext context) { }
    }
}