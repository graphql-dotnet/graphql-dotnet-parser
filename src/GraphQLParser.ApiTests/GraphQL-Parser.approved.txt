namespace GraphQLParser.AST
{
    public abstract class ASTNode
    {
        protected ASTNode() { }
        public abstract GraphQLParser.AST.ASTNodeKind Kind { get; }
        public virtual GraphQLParser.AST.GraphQLComment? Comment { get; set; }
        public virtual GraphQLParser.AST.GraphQLLocation Location { get; set; }
    }
    public enum ASTNodeKind
    {
        Name = 0,
        Document = 1,
        OperationDefinition = 2,
        VariableDefinition = 3,
        Variable = 4,
        SelectionSet = 5,
        Field = 6,
        Argument = 7,
        FragmentSpread = 8,
        InlineFragment = 9,
        FragmentDefinition = 10,
        IntValue = 11,
        FloatValue = 12,
        StringValue = 13,
        BooleanValue = 14,
        EnumValue = 15,
        ListValue = 16,
        ObjectValue = 17,
        ObjectField = 18,
        Directive = 19,
        NamedType = 20,
        ListType = 21,
        NonNullType = 22,
        NullValue = 23,
        SchemaDefinition = 24,
        RootOperationTypeDefinition = 25,
        ScalarTypeDefinition = 26,
        ObjectTypeDefinition = 27,
        FieldDefinition = 28,
        InputValueDefinition = 29,
        InterfaceTypeDefinition = 30,
        UnionTypeDefinition = 31,
        EnumTypeDefinition = 32,
        EnumValueDefinition = 33,
        InputObjectTypeDefinition = 34,
        TypeExtensionDefinition = 35,
        DirectiveDefinition = 36,
        Comment = 37,
        Description = 38,
    }
    public class GraphQLArgument : GraphQLParser.AST.ASTNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLArgument() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
        public GraphQLParser.AST.GraphQLValue? Value { get; set; }
    }
    public class GraphQLComment : GraphQLParser.AST.ASTNode
    {
        public GraphQLComment() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Text { get; set; }
    }
    public class GraphQLDescription : GraphQLParser.AST.ASTNode
    {
        public GraphQLDescription() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; set; }
    }
    public class GraphQLDirective : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasArgumentsNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLDirective() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLArgument>? Arguments { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
    }
    public class GraphQLDirectiveDefinition : GraphQLParser.AST.GraphQLTypeDefinition
    {
        public GraphQLDirectiveDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLInputValueDefinition>? Arguments { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLName>? Locations { get; set; }
        public bool Repeatable { get; set; }
    }
    public class GraphQLDocument : GraphQLParser.AST.ASTNode, System.IDisposable
    {
        public GraphQLDocument() { }
        public System.Collections.Generic.List<GraphQLParser.AST.ASTNode>? Definitions { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLComment>? UnattachedComments { get; set; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
    }
    public class GraphQLEnumTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLEnumTypeDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLEnumValueDefinition>? Values { get; set; }
    }
    public class GraphQLEnumValueDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLEnumValueDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLField : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasArgumentsNode, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLField() { }
        public GraphQLParser.AST.GraphQLName? Alias { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLArgument>? Arguments { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
        public GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; set; }
    }
    public class GraphQLFieldDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLFieldDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLInputValueDefinition>? Arguments { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType? Type { get; set; }
    }
    public class GraphQLFragmentDefinition : GraphQLParser.AST.GraphQLInlineFragment, GraphQLParser.AST.INamedNode
    {
        public GraphQLFragmentDefinition() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
    }
    public class GraphQLFragmentSpread : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLFragmentSpread() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
    }
    public class GraphQLInlineFragment : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLInlineFragment() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; set; }
        public GraphQLParser.AST.GraphQLNamedType? TypeCondition { get; set; }
    }
    public class GraphQLInputObjectTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLInputObjectTypeDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLInputValueDefinition>? Fields { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLInputValueDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLInputValueDefinition() { }
        public GraphQLParser.AST.GraphQLValue? DefaultValue { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType? Type { get; set; }
    }
    public class GraphQLInterfaceTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.IHasInterfacesNode
    {
        public GraphQLInterfaceTypeDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLFieldDefinition>? Fields { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLNamedType>? Interfaces { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLListType : GraphQLParser.AST.GraphQLType
    {
        public GraphQLListType() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType? Type { get; set; }
        public override string ToString() { }
    }
    public class GraphQLListValue : GraphQLParser.AST.GraphQLValue
    {
        public GraphQLListValue(GraphQLParser.AST.ASTNodeKind kind) { }
        public GraphQLParser.ROM AstValue { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLValue>? Values { get; set; }
        public override string ToString() { }
    }
    public readonly struct GraphQLLocation : System.IEquatable<GraphQLParser.AST.GraphQLLocation>
    {
        public GraphQLLocation(int start, int end) { }
        public int End { get; }
        public int Start { get; }
        public bool Equals(GraphQLParser.AST.GraphQLLocation other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(GraphQLParser.AST.GraphQLLocation left, GraphQLParser.AST.GraphQLLocation right) { }
        public static bool operator ==(GraphQLParser.AST.GraphQLLocation left, GraphQLParser.AST.GraphQLLocation right) { }
    }
    public class GraphQLName : GraphQLParser.AST.ASTNode
    {
        public GraphQLName() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; set; }
    }
    public class GraphQLNamedType : GraphQLParser.AST.GraphQLType, GraphQLParser.AST.INamedNode
    {
        public GraphQLNamedType() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
        public override string ToString() { }
    }
    public class GraphQLNonNullType : GraphQLParser.AST.GraphQLType
    {
        public GraphQLNonNullType() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType? Type { get; set; }
        public override string ToString() { }
    }
    public class GraphQLObjectField : GraphQLParser.AST.ASTNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLObjectField() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
        public GraphQLParser.AST.GraphQLValue? Value { get; set; }
    }
    public class GraphQLObjectTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.IHasInterfacesNode
    {
        public GraphQLObjectTypeDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLFieldDefinition>? Fields { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLNamedType>? Interfaces { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLObjectValue : GraphQLParser.AST.GraphQLValue
    {
        public GraphQLObjectValue() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLObjectField>? Fields { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLOperationDefinition : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode, GraphQLParser.AST.INamedNode
    {
        public GraphQLOperationDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
        public GraphQLParser.AST.OperationType Operation { get; set; }
        public GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLVariableDefinition>? VariableDefinitions { get; set; }
    }
    public class GraphQLRootOperationTypeDefinition : GraphQLParser.AST.ASTNode
    {
        public GraphQLRootOperationTypeDefinition() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.OperationType Operation { get; set; }
        public GraphQLParser.AST.GraphQLNamedType? Type { get; set; }
    }
    public class GraphQLScalarTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLScalarTypeDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLScalarValue : GraphQLParser.AST.GraphQLValue
    {
        public GraphQLScalarValue(GraphQLParser.AST.ASTNodeKind kind) { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.ROM Value { get; set; }
        public override string? ToString() { }
    }
    public class GraphQLSchemaDefinition : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDescriptionNode, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLSchemaDefinition() { }
        public GraphQLParser.AST.GraphQLDescription? Description { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLRootOperationTypeDefinition>? OperationTypes { get; set; }
    }
    public class GraphQLSelectionSet : GraphQLParser.AST.ASTNode
    {
        public GraphQLSelectionSet() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.ASTNode>? Selections { get; set; }
    }
    public abstract class GraphQLType : GraphQLParser.AST.ASTNode
    {
        protected GraphQLType() { }
    }
    public abstract class GraphQLTypeDefinition : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDescriptionNode, GraphQLParser.AST.INamedNode
    {
        protected GraphQLTypeDefinition() { }
        public GraphQLParser.AST.GraphQLDescription? Description { get; set; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
    }
    public class GraphQLTypeExtensionDefinition : GraphQLParser.AST.GraphQLTypeDefinition
    {
        public GraphQLTypeExtensionDefinition() { }
        public GraphQLParser.AST.GraphQLObjectTypeDefinition? Definition { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
    }
    public class GraphQLUnionTypeDefinition : GraphQLParser.AST.GraphQLTypeDefinition, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLUnionTypeDefinition() { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLNamedType>? Types { get; set; }
    }
    public abstract class GraphQLValue : GraphQLParser.AST.ASTNode
    {
        protected GraphQLValue() { }
    }
    public class GraphQLVariable : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.INamedNode
    {
        public GraphQLVariable() { }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLName? Name { get; set; }
    }
    public class GraphQLVariableDefinition : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode
    {
        public GraphQLVariableDefinition() { }
        public GraphQLParser.AST.GraphQLValue? DefaultValue { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
        public override GraphQLParser.AST.ASTNodeKind Kind { get; }
        public GraphQLParser.AST.GraphQLType? Type { get; set; }
        public GraphQLParser.AST.GraphQLVariable? Variable { get; set; }
    }
    public interface IHasArgumentsNode
    {
        System.Collections.Generic.List<GraphQLParser.AST.GraphQLArgument>? Arguments { get; set; }
    }
    public interface IHasDescriptionNode
    {
        GraphQLParser.AST.GraphQLDescription? Description { get; set; }
    }
    public interface IHasDirectivesNode
    {
        System.Collections.Generic.List<GraphQLParser.AST.GraphQLDirective>? Directives { get; set; }
    }
    public interface IHasInterfacesNode
    {
        System.Collections.Generic.List<GraphQLParser.AST.GraphQLNamedType>? Interfaces { get; set; }
    }
    public interface INamedNode
    {
        GraphQLParser.AST.GraphQLName? Name { get; set; }
    }
    public enum OperationType
    {
        Query = 0,
        Mutation = 1,
        Subscription = 2,
    }
}
namespace GraphQLParser.Exceptions
{
    public class GraphQLSyntaxErrorException : System.Exception
    {
        public GraphQLSyntaxErrorException(string description, GraphQLParser.ROM source, int location) { }
        public int Column { get; }
        public string Description { get; }
        public int Line { get; }
    }
}
namespace GraphQLParser
{
    [System.Flags]
    public enum IgnoreOptions
    {
        None = 0,
        Comments = 1,
        Locations = 2,
        All = 3,
    }
    public static class Lexer
    {
        public static GraphQLParser.Token Lex(GraphQLParser.ROM source, int start = 0) { }
    }
    public readonly struct Location
    {
        public Location(GraphQLParser.ROM source, int position) { }
        public int Column { get; }
        public int Line { get; }
    }
    public static class Parser
    {
        public static GraphQLParser.AST.GraphQLDocument Parse(GraphQLParser.ROM source, GraphQLParser.ParserOptions options = default) { }
    }
    public struct ParserOptions
    {
        public GraphQLParser.IgnoreOptions Ignore { get; set; }
    }
    public readonly struct ROM : System.IEquatable<GraphQLParser.ROM>
    {
        public ROM(System.ReadOnlyMemory<char> memory) { }
        public bool IsEmpty { get; }
        public int Length { get; }
        public System.ReadOnlySpan<char> Span { get; }
        public bool Equals(GraphQLParser.ROM other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public GraphQLParser.ROM Slice(int start) { }
        public GraphQLParser.ROM Slice(int start, int length) { }
        public override string ToString() { }
        public static string op_Explicit(GraphQLParser.ROM rom) { }
        public static System.ReadOnlyMemory<char> op_Implicit(GraphQLParser.ROM rom) { }
        public static System.ReadOnlySpan<char> op_Implicit(GraphQLParser.ROM rom) { }
        public static GraphQLParser.ROM op_Implicit(char[] array) { }
        public static GraphQLParser.ROM op_Implicit(System.Memory<char> memory) { }
        public static GraphQLParser.ROM op_Implicit(System.ReadOnlyMemory<char> memory) { }
        public static GraphQLParser.ROM op_Implicit(string s) { }
        public static bool operator !=(GraphQLParser.ROM rom, string s) { }
        public static bool operator !=(GraphQLParser.ROM rom1, GraphQLParser.ROM rom2) { }
        public static bool operator !=(string s, GraphQLParser.ROM rom) { }
        public static bool operator ==(GraphQLParser.ROM rom, string s) { }
        public static bool operator ==(GraphQLParser.ROM rom1, GraphQLParser.ROM rom2) { }
        public static bool operator ==(string s, GraphQLParser.ROM rom) { }
    }
    public readonly struct Token
    {
        public Token(GraphQLParser.TokenKind kind, GraphQLParser.ROM value, int start, int end) { }
        public int End { get; }
        public GraphQLParser.TokenKind Kind { get; }
        public int Start { get; }
        public GraphQLParser.ROM Value { get; }
        public override string ToString() { }
    }
    public enum TokenKind
    {
        EOF = 1,
        BANG = 2,
        DOLLAR = 3,
        PAREN_L = 4,
        PAREN_R = 5,
        SPREAD = 6,
        COLON = 7,
        EQUALS = 8,
        AT = 9,
        BRACKET_L = 10,
        BRACKET_R = 11,
        BRACE_L = 12,
        PIPE = 13,
        BRACE_R = 14,
        NAME = 15,
        INT = 16,
        FLOAT = 17,
        STRING = 18,
        COMMENT = 19,
        UNKNOWN = 20,
        AMPERSAND = 21,
    }
}
namespace GraphQLParser.Visitors
{
    public class DefaultNodeVisitor<TContext> : GraphQLParser.Visitors.INodeVisitor<TContext>
        where TContext : GraphQLParser.Visitors.IVisitorContext
    {
        public DefaultNodeVisitor() { }
        public virtual void Visit(GraphQLParser.AST.ASTNode? node, TContext context) { }
        protected void Visit<T>(System.Collections.Generic.List<T>? nodes, TContext context)
            where T : GraphQLParser.AST.ASTNode { }
        public virtual void VisitArgument(GraphQLParser.AST.GraphQLArgument argument, TContext context) { }
        public virtual void VisitBooleanValue(GraphQLParser.AST.GraphQLScalarValue booleanValue, TContext context) { }
        public virtual void VisitComment(GraphQLParser.AST.GraphQLComment comment, TContext context) { }
        public virtual void VisitDescription(GraphQLParser.AST.GraphQLDescription description, TContext context) { }
        public virtual void VisitDirective(GraphQLParser.AST.GraphQLDirective directive, TContext context) { }
        public virtual void VisitDirectiveDefinition(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDefinition, TContext context) { }
        public virtual void VisitDocument(GraphQLParser.AST.GraphQLDocument document, TContext context) { }
        public virtual void VisitEnumTypeDefinition(GraphQLParser.AST.GraphQLEnumTypeDefinition enumTypeDefinition, TContext context) { }
        public virtual void VisitEnumValue(GraphQLParser.AST.GraphQLScalarValue enumValue, TContext context) { }
        public virtual void VisitEnumValueDefinition(GraphQLParser.AST.GraphQLEnumValueDefinition enumValueDefinition, TContext context) { }
        public virtual void VisitField(GraphQLParser.AST.GraphQLField field, TContext context) { }
        public virtual void VisitFieldDefinition(GraphQLParser.AST.GraphQLFieldDefinition fieldDefinition, TContext context) { }
        public virtual void VisitFloatValue(GraphQLParser.AST.GraphQLScalarValue floatValue, TContext context) { }
        public virtual void VisitFragmentDefinition(GraphQLParser.AST.GraphQLFragmentDefinition fragmentDefinition, TContext context) { }
        public virtual void VisitFragmentSpread(GraphQLParser.AST.GraphQLFragmentSpread fragmentSpread, TContext context) { }
        public virtual void VisitInlineFragment(GraphQLParser.AST.GraphQLInlineFragment inlineFragment, TContext context) { }
        public virtual void VisitInputObjectTypeDefinition(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputObjectTypeDefinition, TContext context) { }
        public virtual void VisitInputValueDefinition(GraphQLParser.AST.GraphQLInputValueDefinition inputValueDefinition, TContext context) { }
        public virtual void VisitIntValue(GraphQLParser.AST.GraphQLScalarValue intValue, TContext context) { }
        public virtual void VisitInterfaceTypeDefinition(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceTypeDefinition, TContext context) { }
        public virtual void VisitListType(GraphQLParser.AST.GraphQLListType listType, TContext context) { }
        public virtual void VisitListValue(GraphQLParser.AST.GraphQLListValue listValue, TContext context) { }
        public virtual void VisitName(GraphQLParser.AST.GraphQLName name, TContext context) { }
        public virtual void VisitNamedType(GraphQLParser.AST.GraphQLNamedType namedType, TContext context) { }
        public virtual void VisitNonNullType(GraphQLParser.AST.GraphQLNonNullType nonNullType, TContext context) { }
        public virtual void VisitNullValue(GraphQLParser.AST.GraphQLScalarValue nullValue, TContext context) { }
        public virtual void VisitObjectField(GraphQLParser.AST.GraphQLObjectField objectField, TContext context) { }
        public virtual void VisitObjectTypeDefinition(GraphQLParser.AST.GraphQLObjectTypeDefinition objectTypeDefinition, TContext context) { }
        public virtual void VisitObjectValue(GraphQLParser.AST.GraphQLObjectValue objectValue, TContext context) { }
        public virtual void VisitOperationDefinition(GraphQLParser.AST.GraphQLOperationDefinition operationDefinition, TContext context) { }
        public virtual void VisitRootOperationTypeDefinition(GraphQLParser.AST.GraphQLRootOperationTypeDefinition rootOperationTypeDefinition, TContext context) { }
        public virtual void VisitScalarTypeDefinition(GraphQLParser.AST.GraphQLScalarTypeDefinition scalarTypeDefinition, TContext context) { }
        public virtual void VisitSchemaDefinition(GraphQLParser.AST.GraphQLSchemaDefinition schemaDefinition, TContext context) { }
        public virtual void VisitSelectionSet(GraphQLParser.AST.GraphQLSelectionSet selectionSet, TContext context) { }
        public virtual void VisitStringValue(GraphQLParser.AST.GraphQLScalarValue stringValue, TContext context) { }
        public virtual void VisitUnionTypeDefinition(GraphQLParser.AST.GraphQLUnionTypeDefinition unionTypeDefinition, TContext context) { }
        public virtual void VisitVariable(GraphQLParser.AST.GraphQLVariable variable, TContext context) { }
        public virtual void VisitVariableDefinition(GraphQLParser.AST.GraphQLVariableDefinition variableDefinition, TContext context) { }
    }
    public interface INodeVisitor<TContext>
        where TContext : GraphQLParser.Visitors.IVisitorContext
    {
        void VisitArgument(GraphQLParser.AST.GraphQLArgument argument, TContext context);
        void VisitBooleanValue(GraphQLParser.AST.GraphQLScalarValue booleanValue, TContext context);
        void VisitComment(GraphQLParser.AST.GraphQLComment comment, TContext context);
        void VisitDescription(GraphQLParser.AST.GraphQLDescription description, TContext context);
        void VisitDirective(GraphQLParser.AST.GraphQLDirective directive, TContext context);
        void VisitDirectiveDefinition(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDefinition, TContext context);
        void VisitDocument(GraphQLParser.AST.GraphQLDocument document, TContext context);
        void VisitEnumTypeDefinition(GraphQLParser.AST.GraphQLEnumTypeDefinition enumTypeDefinition, TContext context);
        void VisitEnumValue(GraphQLParser.AST.GraphQLScalarValue enumValue, TContext context);
        void VisitEnumValueDefinition(GraphQLParser.AST.GraphQLEnumValueDefinition enumValueDefinition, TContext context);
        void VisitField(GraphQLParser.AST.GraphQLField field, TContext context);
        void VisitFieldDefinition(GraphQLParser.AST.GraphQLFieldDefinition fieldDefinition, TContext context);
        void VisitFloatValue(GraphQLParser.AST.GraphQLScalarValue floatValue, TContext context);
        void VisitFragmentDefinition(GraphQLParser.AST.GraphQLFragmentDefinition fragmentDefinition, TContext context);
        void VisitFragmentSpread(GraphQLParser.AST.GraphQLFragmentSpread fragmentSpread, TContext context);
        void VisitInlineFragment(GraphQLParser.AST.GraphQLInlineFragment inlineFragment, TContext context);
        void VisitInputObjectTypeDefinition(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputObjectTypeDefinition, TContext context);
        void VisitInputValueDefinition(GraphQLParser.AST.GraphQLInputValueDefinition inputValueDefinition, TContext context);
        void VisitIntValue(GraphQLParser.AST.GraphQLScalarValue intValue, TContext context);
        void VisitInterfaceTypeDefinition(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceTypeDefinition, TContext context);
        void VisitListType(GraphQLParser.AST.GraphQLListType listType, TContext context);
        void VisitListValue(GraphQLParser.AST.GraphQLListValue listValue, TContext context);
        void VisitName(GraphQLParser.AST.GraphQLName name, TContext context);
        void VisitNamedType(GraphQLParser.AST.GraphQLNamedType namedType, TContext context);
        void VisitNonNullType(GraphQLParser.AST.GraphQLNonNullType nonNullType, TContext context);
        void VisitNullValue(GraphQLParser.AST.GraphQLScalarValue nullValue, TContext context);
        void VisitObjectField(GraphQLParser.AST.GraphQLObjectField objectField, TContext context);
        void VisitObjectTypeDefinition(GraphQLParser.AST.GraphQLObjectTypeDefinition objectTypeDefinition, TContext context);
        void VisitObjectValue(GraphQLParser.AST.GraphQLObjectValue objectValue, TContext context);
        void VisitOperationDefinition(GraphQLParser.AST.GraphQLOperationDefinition operationDefinition, TContext context);
        void VisitRootOperationTypeDefinition(GraphQLParser.AST.GraphQLRootOperationTypeDefinition rootOperationTypeDefinition, TContext context);
        void VisitScalarTypeDefinition(GraphQLParser.AST.GraphQLScalarTypeDefinition scalarTypeDefinition, TContext context);
        void VisitSchemaDefinition(GraphQLParser.AST.GraphQLSchemaDefinition schemaDefinition, TContext context);
        void VisitSelectionSet(GraphQLParser.AST.GraphQLSelectionSet selectionSet, TContext context);
        void VisitStringValue(GraphQLParser.AST.GraphQLScalarValue stringValue, TContext context);
        void VisitUnionTypeDefinition(GraphQLParser.AST.GraphQLUnionTypeDefinition unionTypeDefinition, TContext context);
        void VisitVariable(GraphQLParser.AST.GraphQLVariable variable, TContext context);
        void VisitVariableDefinition(GraphQLParser.AST.GraphQLVariableDefinition variableDefinition, TContext context);
    }
    public interface IVisitorContext { }
    public interface IWriteContext : GraphQLParser.Visitors.IVisitorContext
    {
        System.Collections.Generic.Stack<GraphQLParser.AST.ASTNode> Parent { get; }
        System.IO.TextWriter Writer { get; }
    }
    public class SDLWriter<TContext> : GraphQLParser.Visitors.DefaultNodeVisitor<TContext>
        where TContext : GraphQLParser.Visitors.IWriteContext
    {
        public SDLWriter() { }
        public override void Visit(GraphQLParser.AST.ASTNode? node, TContext context) { }
        public override void VisitArgument(GraphQLParser.AST.GraphQLArgument argument, TContext context) { }
        public override void VisitBooleanValue(GraphQLParser.AST.GraphQLScalarValue booleanValue, TContext context) { }
        public override void VisitComment(GraphQLParser.AST.GraphQLComment comment, TContext context) { }
        public override void VisitDescription(GraphQLParser.AST.GraphQLDescription description, TContext context) { }
        public override void VisitDirective(GraphQLParser.AST.GraphQLDirective directive, TContext context) { }
        public override void VisitDirectiveDefinition(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDefinition, TContext context) { }
        public override void VisitDocument(GraphQLParser.AST.GraphQLDocument document, TContext context) { }
        public override void VisitEnumTypeDefinition(GraphQLParser.AST.GraphQLEnumTypeDefinition enumTypeDefinition, TContext context) { }
        public override void VisitEnumValue(GraphQLParser.AST.GraphQLScalarValue enumValue, TContext context) { }
        public override void VisitEnumValueDefinition(GraphQLParser.AST.GraphQLEnumValueDefinition enumValueDefinition, TContext context) { }
        public override void VisitField(GraphQLParser.AST.GraphQLField field, TContext context) { }
        public override void VisitFieldDefinition(GraphQLParser.AST.GraphQLFieldDefinition fieldDefinition, TContext context) { }
        public override void VisitFloatValue(GraphQLParser.AST.GraphQLScalarValue floatValue, TContext context) { }
        public override void VisitFragmentDefinition(GraphQLParser.AST.GraphQLFragmentDefinition fragmentDefinition, TContext context) { }
        public override void VisitFragmentSpread(GraphQLParser.AST.GraphQLFragmentSpread fragmentSpread, TContext context) { }
        public override void VisitInlineFragment(GraphQLParser.AST.GraphQLInlineFragment inlineFragment, TContext context) { }
        public override void VisitInputObjectTypeDefinition(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputObjectTypeDefinition, TContext context) { }
        public override void VisitInputValueDefinition(GraphQLParser.AST.GraphQLInputValueDefinition inputValueDefinition, TContext context) { }
        public override void VisitIntValue(GraphQLParser.AST.GraphQLScalarValue intValue, TContext context) { }
        public override void VisitInterfaceTypeDefinition(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceTypeDefinition, TContext context) { }
        public override void VisitListType(GraphQLParser.AST.GraphQLListType listType, TContext context) { }
        public override void VisitListValue(GraphQLParser.AST.GraphQLListValue listValue, TContext context) { }
        public override void VisitName(GraphQLParser.AST.GraphQLName name, TContext context) { }
        public override void VisitNamedType(GraphQLParser.AST.GraphQLNamedType namedType, TContext context) { }
        public override void VisitNonNullType(GraphQLParser.AST.GraphQLNonNullType nonNullType, TContext context) { }
        public override void VisitNullValue(GraphQLParser.AST.GraphQLScalarValue nullValue, TContext context) { }
        public override void VisitObjectField(GraphQLParser.AST.GraphQLObjectField objectField, TContext context) { }
        public override void VisitObjectTypeDefinition(GraphQLParser.AST.GraphQLObjectTypeDefinition objectTypeDefinition, TContext context) { }
        public override void VisitObjectValue(GraphQLParser.AST.GraphQLObjectValue objectValue, TContext context) { }
        public override void VisitOperationDefinition(GraphQLParser.AST.GraphQLOperationDefinition operationDefinition, TContext context) { }
        public override void VisitRootOperationTypeDefinition(GraphQLParser.AST.GraphQLRootOperationTypeDefinition rootOperationTypeDefinition, TContext context) { }
        public override void VisitScalarTypeDefinition(GraphQLParser.AST.GraphQLScalarTypeDefinition scalarTypeDefinition, TContext context) { }
        public override void VisitSchemaDefinition(GraphQLParser.AST.GraphQLSchemaDefinition schemaDefinition, TContext context) { }
        public override void VisitSelectionSet(GraphQLParser.AST.GraphQLSelectionSet selectionSet, TContext context) { }
        public override void VisitStringValue(GraphQLParser.AST.GraphQLScalarValue stringValue, TContext context) { }
        public override void VisitUnionTypeDefinition(GraphQLParser.AST.GraphQLUnionTypeDefinition unionTypeDefinition, TContext context) { }
        public override void VisitVariable(GraphQLParser.AST.GraphQLVariable variable, TContext context) { }
        public override void VisitVariableDefinition(GraphQLParser.AST.GraphQLVariableDefinition variableDefinition, TContext context) { }
    }
    public class StructureWriter<TContext> : GraphQLParser.Visitors.DefaultNodeVisitor<TContext>
        where TContext : GraphQLParser.Visitors.IWriteContext
    {
        public StructureWriter() { }
        public override void Visit(GraphQLParser.AST.ASTNode? node, TContext context) { }
    }
}